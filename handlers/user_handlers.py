# handlers/user_handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta, datetime, time
from aiogram_i18n import I18nContext

from filters import MagicI18nFilter
from aiogram.exceptions import TelegramBadRequest

import database as db
import keyboards as kb
from states import UserSetup, RecordShift
from config import BotConfig

router = Router()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π ---
@router.callback_query(UserSetup.waiting_for_role_selection, F.data.startswith("setup_toggle_role_"))
async def setup_toggle_role(callback: CallbackQuery, state: FSMContext, i18n: I18nContext):
    role_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    selected_roles = data.get("selected_roles", [])

    if role_id in selected_roles:
        selected_roles.remove(role_id)
    else:
        selected_roles.append(role_id)

    await state.update_data(selected_roles=selected_roles)

    all_roles = await db.get_roles()
    await callback.message.edit_reply_markup(
        reply_markup=kb.get_role_selection_keyboard(
            i18n=i18n,
            all_roles=all_roles,
            selected_role_ids=selected_roles,
            is_setup=True
        )
    )
    await callback.answer()

@router.callback_query(UserSetup.waiting_for_role_selection, F.data == "setup_finish_roles")
async def setup_finish_roles(callback: CallbackQuery, state: FSMContext, i18n: I18nContext, config: BotConfig):
    data = await state.get_data()
    selected_roles = data.get("selected_roles", [])

    if not selected_roles:
        await callback.answer(i18n.setup_error_no_roles(), show_alert=True)
        return

    await db.set_user_roles(callback.from_user.id, selected_roles)
    await state.clear()

    is_admin = callback.from_user.id in config.admin_ids
    await callback.message.edit_text(
        i18n.setup_success(),
        reply_markup=None
    )
    await callback.message.answer(
        i18n.welcome(user_name=callback.from_user.first_name),
        reply_markup=kb.get_main_menu_keyboard(i18n, is_admin)
    )
    await callback.answer()

# --- –ù–û–í–´–ô –ü–†–û–¶–ï–°–° –ó–ê–ü–ò–°–ò –°–ú–ï–ù–´ (–¢–í–û–ô –ú–ï–¢–û–î) ---
@router.message(MagicI18nFilter("button_record_shift"))
async def cmd_record_shift(message: Message, state: FSMContext, i18n: I18nContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–æ–ª–µ–π
    await db.add_or_update_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    user_roles = await db.get_user_roles(user_id)
    if not user_roles:
        await message.reply(i18n.error_no_roles_assigned())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –ù–ê–ß–ê–õ–û —Å–º–µ–Ω—ã
    recorded_start = await db.get_recorded_shift_start(user_id)

    if recorded_start:
        # –ï—Å–ª–∏ –ù–ê–ß–ê–õ–û –µ—Å—Ç—å -> –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ö–û–ù–ï–¶
        role_id, start_hour, start_date_obj = recorded_start
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É —Ç–æ–≥–æ –∂–µ –¥–Ω—è
        if start_date_obj != date.today():
            await db.delete_recorded_shift_start(user_id)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≤–∏–º KeyError –Ω–∞ —Å–ª—É—á–∞–π —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ i18n
            try:
                await message.reply(i18n.shift_start_forgotten(start_date=start_date_obj.isoformat()))
            except KeyError:
                await message.reply("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å —É–¥–∞–ª–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é.")
            return

        await state.set_state(RecordShift.waiting_for_end_time)
        await state.update_data(role_id=role_id, start_hour=start_hour)
        await message.answer(
            i18n.shift_request_end_time(start_hour=start_hour),
            reply_markup=kb.get_end_time_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ù–ê–ß–ê–õ–ê –Ω–µ—Ç -> –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –†–û–õ–¨ (–µ—Å–ª–∏ –Ω–∞–¥–æ) –∏ –ù–ê–ß–ê–õ–û
        if len(user_roles) == 1:
            # –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ù–ê–ß–ê–õ–û
            role_id, role_name, _ = user_roles[0]
            await state.set_state(RecordShift.waiting_for_start_time)
            await state.update_data(role_id=role_id)
            await message.answer(
                i18n.shift_request_start_time_role(role_name=role_name),
                reply_markup=kb.get_start_time_keyboard()
            )
        else:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –†–û–õ–¨
            await state.set_state(RecordShift.waiting_for_role)
            await message.answer(
                i18n.shift_select_role(),
                reply_markup=kb.get_role_selection_keyboard(
                    i18n=i18n, all_roles=user_roles, is_setup=False, prefix="record_shift_role_"
                )
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –†–û–õ–ò –¥–ª—è –ù–ê–ß–ê–õ–ê —Å–º–µ–Ω—ã
@router.callback_query(RecordShift.waiting_for_role, F.data.startswith("record_shift_role_"))
async def process_shift_start_role(callback: CallbackQuery, state: FSMContext, i18n: I18nContext):
    role_id = int(callback.data.split("_")[-1])
    all_roles = await db.get_roles()
    role_name = next((name for r_id, name, _ in all_roles if r_id == role_id), "???")

    await state.set_state(RecordShift.waiting_for_start_time)
    await state.update_data(role_id=role_id)

    await callback.message.edit_text(
        i18n.shift_request_start_time_role(role_name=role_name),
        reply_markup=kb.get_start_time_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞ –ù–ê–ß–ê–õ–ê —Å–º–µ–Ω—ã
@router.callback_query(RecordShift.waiting_for_start_time, F.data.startswith("start_"))
async def process_shift_start_time(callback: CallbackQuery, state: FSMContext, i18n: I18nContext):
    start_hour = int(callback.data.split("_")[1])
    data = await state.get_data()
    role_id = data.get("role_id")
    user_id = callback.from_user.id

    if not role_id:
        # –û–±–µ—Ä–Ω–µ–º –≤ try-except
        try:
            await callback.message.edit_text(i18n.error_role_or_time_not_found())
        except KeyError:
             await callback.message.edit_text("üö´ –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
        await state.clear(); await callback.answer(); return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —É–∂–µ –ó–ê–ü–ò–°–ê–ù–ù–´–ú–ò —Å–º–µ–Ω–∞–º–∏ –∑–∞ –°–ï–ì–û–î–ù–Ø
    today = date.today()
    existing_shifts = await db.get_user_shifts_for_day(user_id, today)
    for old_start, old_end in existing_shifts:
        # –ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å –≤–Ω—É—Ç—Ä—å –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        # start_hour >= old_end
        if start_hour < old_end:
            try:
                await callback.message.edit_text(
                    i18n.shift_error_start_overlap(
                        start_hour=start_hour, old_start=old_start, old_end=old_end
                    ))
            except KeyError:
                await callback.message.edit_text(
                    f"üö´ –û—à–∏–±–∫–∞! –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({start_hour}:00) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å ({old_start}:00 - {old_end}:00).",
                    reply_markup=None
                )
            await state.clear(); await callback.answer(i18n.shift_error_alert(), show_alert=True); return

    # –í—Å–µ –æ–∫, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ù–ê–ß–ê–õ–û –≤ active_shifts
    try:
        await db.record_shift_start(user_id, role_id, start_hour)
        await callback.message.edit_text(i18n.shift_start_recorded(start_hour=start_hour))
    except KeyError as e:
         await callback.message.edit_text(
            f"–û–®–ò–ë–ö–ê i18n ({e})\n–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –≤ {start_hour}:00 –∑–∞–ø–∏—Å–∞–Ω–æ.",
            reply_markup=None
         )
    except Exception as e:
        try:
            await callback.message.edit_text(i18n.generic_db_error(error=str(e)))
        except KeyError:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ë–î: {e}", reply_markup=None)


    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞ –û–ö–û–ù–ß–ê–ù–ò–Ø —Å–º–µ–Ω—ã
@router.callback_query(RecordShift.waiting_for_end_time, F.data.startswith("end_"))
async def process_shift_end_time(callback: CallbackQuery, state: FSMContext, i18n: I18nContext):
    end_hour = int(callback.data.split("_")[1])
    data = await state.get_data()
    start_hour = data.get("start_hour")
    role_id = data.get("role_id")
    user_id = callback.from_user.id

    if role_id is None or start_hour is None:
        try:
            await callback.message.edit_text(i18n.error_role_or_time_not_found())
        except KeyError:
            await callback.message.edit_text("üö´ –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
        await state.clear(); await callback.answer(i18n.shift_error_alert(), show_alert=True); return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –ö–æ–Ω–µ—Ü > –ù–∞—á–∞–ª–æ
    if end_hour <= start_hour:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer —Å show_alert=True
        await callback.answer(i18n.shift_error_end_lt_start(end_hour=end_hour, start_hour=start_hour), show_alert=True)
        return # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ó–ê–ü–ò–°–ê–ù–ù–´–ú–ò —Å–º–µ–Ω–∞–º–∏ –∑–∞ –°–ï–ì–û–î–ù–Ø
    today = date.today()
    existing_shifts = await db.get_user_shifts_for_day(user_id, today)
    for old_start, old_end in existing_shifts:
        if (start_hour < old_end and end_hour > old_start):
            try:
                await callback.message.edit_text(i18n.shift_error_overlap(
                    new_start=start_hour, new_end=end_hour, old_start=old_start, old_end=old_end
                ))
            except KeyError:
                await callback.message.edit_text(
                    f"üö´ –û—à–∏–±–∫–∞! –°–º–µ–Ω–∞ ({start_hour}:00 - {end_hour}:00) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å ({old_start}:00 - {old_end}:00).",
                    reply_markup=None
                    )
            await db.delete_recorded_shift_start(user_id) # –£–¥–∞–ª—è–µ–º –æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ
            await state.clear(); await callback.answer(i18n.shift_error_alert(), show_alert=True); return

    # –í—Å–µ –æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ó–ê–í–ï–†–®–ï–ù–ù–£–Æ —Å–º–µ–Ω—É –∏ —É–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª–æ
    try:
        await db.add_shift(user_id, role_id, start_hour, end_hour)
        await db.delete_recorded_shift_start(user_id)

        hours_worked = end_hour - start_hour
        all_roles = await db.get_roles()
        role_name = next((name for r_id, name, _ in all_roles if r_id == role_id), "???")

        await callback.message.edit_text(
            i18n.shift_success_recorded(
                date=today.isoformat(), role_name=role_name,
                start_time=start_hour, end_time=end_hour, hours=hours_worked
            )
        )
    except KeyError as e:
         await callback.message.edit_text(
             f"–û–®–ò–ë–ö–ê i18n ({e})\n–°–º–µ–Ω–∞ {start_hour}:00 - {end_hour}:00 –∑–∞–ø–∏—Å–∞–Ω–∞.",
             reply_markup=None
         )
    except Exception as e:
        try:
            await callback.message.edit_text(i18n.generic_db_error(error=str(e)))
        except KeyError:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ë–î: {e}", reply_markup=None)
        try: await db.delete_recorded_shift_start(user_id)
        except: pass

    await state.clear()
    await callback.answer()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@router.message(MagicI18nFilter("button_my_stats"))
async def my_statistics(message: Message, i18n: I18nContext, config: BotConfig):
     user_id=message.from_user.id
     await db.add_or_update_user(user_id=user_id,username=message.from_user.username,first_name=message.from_user.first_name)
     await message.answer(i18n.stats_select_period(), reply_markup=kb.get_stats_period_keyboard(i18n))

@router.callback_query(F.data.startswith("stats_"))
async def send_my_stats_report(callback: CallbackQuery, i18n: I18nContext):
    period = callback.data.split("_")[1]; user_id = callback.from_user.id; today = date.today()
    if period == "week": start_date=today-timedelta(days=today.weekday()); end_date=today
    elif period == "month": start_date=today.replace(day=1); end_date=today
    else: await callback.answer("Unknown period", show_alert=True); return

    total_hours, total_earnings, report_by_role = await db.get_user_shifts_report(user_id, start_date, end_date)
    if not report_by_role:
        await callback.message.edit_text(i18n.stats_report_no_data())
        await callback.answer()
        return

    report_lines = []
    try:
        report_lines.append(i18n.stats_report_header(start_date=start_date.isoformat(), end_date=end_date.isoformat()))
        for role_name, data in report_by_role.items():
            report_lines.append(f"\n{i18n.stats_role_header(role_name=role_name, hours=data['hours'], rate=data['rate'], earnings=data['earnings'])}")
            report_lines.extend(data['shifts'])
        report_lines.append(f"\n\n{i18n.stats_report_footer_total(total_hours=total_hours, total_earnings=total_earnings)}")
        await callback.message.edit_text("\n".join(report_lines), disable_web_page_preview=True)
    except KeyError as e:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ i18n
        await callback.message.edit_text(
            f"–û–®–ò–ë–ö–ê i18n ({e}).\n–û—Ç—á–µ—Ç {start_date.isoformat()}-{end_date.isoformat()}.\n"
            f"–ò—Ç–æ–≥–æ: {total_hours} —á., {total_earnings} RSD.\n"
            f"–î–µ—Ç–∞–ª–∏ (—Å—ã—Ä—ã–µ): {report_by_role}",
            parse_mode=None, disable_web_page_preview=True
        )
    await callback.answer()